Kubernetes Installation Steps using Kubeadm

History of Commands Used:

1. Set Hostname

hostname
hostnamectl set-hostname master-node
logout

2. Update and Install Dependencies

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

3. Add Kubernetes Repository

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update

4. Install Kubernetes Components

sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
kubeadm version

5. Update and Install Container Runtime

sudo apt update
sudo apt upgrade
sudo apt install containerd

6. Configure Containerd

sudo mkdir /etc/containerd
containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd

7. Verify Configuration

ps -p 1
cat /etc/containerd/config.toml | grep -i SystemdCgroup -B 50

8. Initialize Kubernetes Master Node

sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs --v=5

9. Enable IP Forwarding

sudo sysctl -w net.ipv4.ip_forward=1
sudo nano /etc/sysctl.conf
# Add: net.ipv4.ip_forward=1
sudo sysctl -p
cat /proc/sys/net/ipv4/ip_forward

10. Retry Initialization (if required)

sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs --v=5
sudo cat /etc/kubernetes/admin.conf

11. Configure kubectl for the Master Node

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

12. Install Pod Network (Calico)

kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml

13. Verify the Installation

kubectl get nodes
kubectl get pods -n kube-system

Notes:

Ensure the container runtime (containerd) is correctly configured with SystemdCgroup = true.

IP forwarding must be enabled before initializing the Kubernetes cluster.

Always verify the status of the cluster using kubectl get nodes and kubectl get pods -n kube-system.

Troubleshooting:

If any port-related errors occur, ensure the required ports (6443, 10250, etc.) are not blocked by firewalls.

For IP forwarding issues, check /proc/sys/net/ipv4/ip_forward and update /etc/sysctl.conf accordingly.





###################################################################################################################################################################
Install Kubeadm history into GCP Compute Instaces:-
-------------------------------------------------------
history 
    1  hostname
    2  hostnamectl set-hostme master-node
    3  hostnamectl set-hostname master-node
    4  sudo hostnamectl set-hostname master-node
    5  logout
    6  sudo apt-get update
    7  sudo apt-get install -y apt-transport-https ca-certificates curl gpg
    8  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    9  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   10  sudo apt-get update
   11  sudo apt-get install -y kubelet kubeadm kubectl
   12  sudo apt-mark hold kubelet kubeadm kubectl
   13  kubeadm version
   14  sudp apt update
   15  sudo apt update
   16  sudo apt upgrade 
   17  sudo apt install containerd
   18  sudo systemctl restart networkd-dispatcher.service
   19  sudo systemctl restart unattended-upgrades.service
   20  ps -p 1
   21  cat /etc/containerd/config.toml
   22  ps -p 1
   23  sudo makdir /etc/containerd
   24* sudo mkdir /etc/containerd
   25  containerd config default
   26  containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup =true' | sudo tee /etc/containerd/config.toml
   27  containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml
   28  cat /etc/containerd/config.toml | grep -i SystemdCgroup -B 50
   29  sudo systemctl restart containerd
   30  ip add sho
   31  kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs
   32  sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs
   33  sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs --v=5
   34  sudo sysctl -w net.ipv4.ip_forward=1
   35  sudo nano /etc/sysctl.conf
   36  sudo sysctl -p
   37  cat /proc/sys/net/ipv4/ip_forward
   38  sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs --v=5
   39  sudo  cat /etc/kubernetes/admin.conf 
   40  mkdir -p $HOME/.kube
   41  kubectl get node
   42  kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml
   43  kubectl get pods -n kube-system
   44  kubectl get nodes
   45  kubectl get pods -n kube-system
   46  kubectl get nodes


###################################################################################################################################################################

Script step but prefer install line by line good: setup-kubernetes.sh
------------------------------------------------------------------------

#!/bin/bash

set -e

echo "Starting Kubernetes setup using kubeadm.."

# Update and install prerequisites
echo "Installing prerequisites..."
sudo apt-get update -y
sudo apt-get install -y apt-transport-https curl ca-certificates gpg

# Add Kubernetes repository key
echo "Adding Kubernetes repository key..."
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

# Add Kubernetes repository
echo "Adding Kubernetes repository..."
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update package list and install Kubernetes tools
echo "Installing Kubernetes tools..."
sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# Verify installation
echo "Verifying installation..."
kubeadm version
kubectl version --client
kubelet --version

# Initialize Kubernetes control plane
echo "Initializing Kubernetes control plane..."
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

# Configure kubectl for the current user
echo "Configuring kubectl for the current user..."
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Deploy Calico as the network plugin
echo "Deploying Calico network plugin..."
kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml

# Enable kubelet
echo "Enabling kubelet service..."
sudo systemctl enable --now kubelet

# Optional: Create firewall rules using gcloud CLI (if applicable)
echo "Creating firewall rules for Kubernetes..."
gcloud compute firewall-rules create allow-nodeport-traffic \
  --allow=tcp:6443 \
  --network=default \
  --source-ranges=0.0.0.0/0 \
  --description="Allow NodePort traffic"

gcloud compute firewall-rules create allow-kubeadm-traffic \
  --allow=tcp:6443 \
  --network=default \
  --source-ranges=0.0.0.0/0 \
  --description="Allow traffic for kubeadm setup"

# Final verification
echo "Verifying node status..."
kubectl get nodes

echo "Kubernetes setup completed successfully!"

##############################################################################################################################################################
If using Google Cloud, you can create a firewall rule:
######################################################
bash
Copy code
gcloud compute firewall-rules create allow-kubernetes \
  --allow tcp:6443,tcp:10250,tcp:10251,tcp:10252,udp:8472 \
  --network <network-name> \
  --source-ranges <control-plane-and-worker-node-IP-range>
3. Generate a Join Command
On the control plane node, generate the token and CA certificate hash required for the worker nodes to join:

bash
Copy code
sudo kubeadm token create --print-join-command
The output will look like this:

bash
Copy code
kubeadm join <control-plane-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash>
Save this command as you'll run it on the worker node.

4. Configure Networking
If the control plane and worker node are in different VPCs:

Peering: Set up VPC network peering between the two VPCs. Ensure the peering allows traffic over the required ports.
Routing: Configure appropriate routes if subnets are non-overlapping.
5. Join Worker Node
On the worker node, run the kubeadm join command generated earlier:

bash
Copy code
sudo kubeadm join <control-plane-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash>
If successful, you'll see output indicating the node has joined the cluster.

6. Verify Cluster Status
On the control plane node, confirm the worker node has joined the cluster:

bash
Copy code
kubectl get nodes
You should see the worker node listed as Ready after a few moments.

7. Install Networking Plugin
If you haven't already deployed a networking plugin (e.g., Calico, Flannel):

Apply it to the cluster from the control plane:

bash
Copy code
kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml
Verify that pods can communicate across nodes:

bash
Copy code
kubectl get pods --all-namespaces -o wide
Notes
Ensure that the kubelet service is enabled and running on both control plane and worker nodes:

bash
Copy code
sudo systemctl enable kubelet && sudo systemctl start kubelet
If the worker node fails to join, review the logs on the worker node:

bash
Copy code
sudo journalctl -xeu kubelet
Let me know if you need help debugging or additional details!


-----------------------------------------------------------------------------------------------------------------
step by step line by line for save more 
----------------------------------------------------------------------------------------------------------------
sudo apt update
sudo apt upgrade -y
sudo apt install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER
newgrp docker
sudo apt-get install -y apt-transport-https curl

curl -fsSL https://dl.k8s.io/release/$(curl -sL "https://dl.k8s.io/release/stable" | cut -f1) | sudo tee /etc/apt/keyrings/kubernetes-archive-keyring.gpg > /dev/null

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl

---------------------------------------------------------------------------------------------------------------------
sudo apt update && sudo apt upgrade -y

sudo apt install -y docker.io
sudo systemctl enable docker && sudo systemctl start docker

sudo apt-get install -y apt-transport-https curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


sudo kubeadm init --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

3. Install CNI Plugin
kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml



sudo kubeadm join 10.128.0.49:6443 --token <token> --discovery-token-ca-cert-hash sha256:


#allowe FW between nodes into GCP shell Comand :-
-----------------------------------------------------

gcloud compute firewall-rules create allow-kubernetes \
  --allow tcp:6443,tcp:10250,tcp:10251,tcp:10252,udp:8472 \
  --network=default \
  --source-ranges=0.0.0.0/0 \
  --description="Allow traffic to Install kubeadm port"

gcloud compute firewall-rules create allow-kubeadm-traffic \
    --allow=tcp:6443 \
    --network=default \
    --source-ranges=0.0.0.0/0 \
    --description="Allow traffic to Installing kubeadm port"
-------------------------------------------------------------------------------------

#install Cgroup -containerd:-
----------------------------------------

containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml

cat /etc/containerd/config.toml | grep -i SystemdCgroup -B 50

sudo systemctl restart containerd


#run this into Master Node only :-
----------------------------------------

sudo kubeadm init --apiserver-advertise-address=10.128.15.197 --pod-network-cidr=10.244.0.0/16 --upload-certs --v=5

Output like that :-
------------------------
To start using your cluster, you need to run the following as a regular user:
-----------------------------------------------------------------------------
  

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

#Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.128.15.197:6443 --token rs50tr.sf7ccez5ng1v4f0m \
        --discovery-token-ca-cert-hash sha256:ab2a7ac4190f90b0ec1b6cb81180a3a48fe15e0769652afb6a99f2f997f



Verfing cert:-
sudo  cat /etc/kubernetes/admin.conf 

Applying Calico:-
---------------------
Applying Calico
Run:

bash
Copy
Edit
kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml
Verify Calico Installation
Check if all Calico pods are running:

bash
Copy
Edit
kubectl get pods -n kube-system
Look for pods like calico-kube-controllers and calico-node. Ensure their status is Running.

Check node status:

bash
Copy
Edit
kubectl get nodes
Nodes should show Ready status.

Troubleshooting
If Calico pods are not running, inspect the logs:

bash
Copy
Edit
kubectl logs -n kube-system <pod-name>
Ensure cgroupDriver matches between kubelet and containerd:

bash
Copy
Edit
cat /etc/containerd/config.toml | grep SystemdCgroup
If mismatched, adjust as needed:

bash
Copy
Edit
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd kubelet




